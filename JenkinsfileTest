pipeline {
    agent any
    stages {
        stage('Build and Test') {
            steps {
                script {
                    // Construir la imagen y ejecutar las pruebas
                    try {
                        sh 'docker build -t api-image .'
                    } catch (Exception err) {
                        error("Error en la construcción o pruebas. Revisa el Dockerfile y los test.")
                    }
                }
            }
        }
        stage('Run API') {
            steps {
                script {
                    // Ejecutar el contenedor en segundo plano
                    sh 'docker run -d --name api-container -p 8083:8083 api-image'
                    // Esperar a que la API esté en funcionamiento
                    sleep 20
                }
            }
        }
        stage('Integration Tests') {
            steps {
                script {
                    // Realizar pruebas de integración con `curl`
                    try {
                        // Prueba de un endpoint, por ejemplo, GET /activities
                        sh 'curl -f http://localhost:8083/activities'
                        
                        // Prueba de otro endpoint, por ejemplo, POST /activities
                        sh 'curl -X POST -H "Content-Type: application/json" -d \'{"name":"New Activity"}\' http://localhost:8083/activities'
                        
                    } catch (Exception err) {
                        error("Error en las pruebas de integración. Verifica los endpoints.")
                    }
                }
            }
        }
    }
    post {
        always {
            // Detener y eliminar el contenedor después de las pruebas
            sh 'docker stop api-container'
            sh 'docker rm api-container'
        }
        success {
            echo 'Pipeline completado exitosamente.'
        }
        failure {
            echo 'Pipeline fallido.'
        }
    }
}
